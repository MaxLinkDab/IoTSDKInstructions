package com.td.common_service.service;import com.alibaba.fastjson.JSONObject;import com.td.common.vo.R;import com.td.common_service.model.DeviceInfo;import com.td.common_service.model.Powerbank;import java.util.List;/** * the interface for the device-related */public interface DeviceService {	/**	 * recieve form device report information	 * @param splitData the packet from device	 * @param requestJson the parameter of  request	 */	int backReport(String[] splitData, String requestJson);	int backReport(JSONObject msg);	int backReport(JSONObject message,String msg);	/**	 * scanner the q-code and start to rent	 * @param userId the user information	 * @param uuid the device uuid	 */	R startRent(String userId, String uuid, String positionUuid, String orderNo);	/**	 *  retrieve  device information by device uuid	 * @param uuid the device uuid	 * @return	 */	DeviceInfo getDeviceInfoByUuid(String uuid);	void updatePowerbank(String str,String sr);	/**	 * modify the device state	 * @param deviceUuid the device uuid	 * @param deviceState the device state	 * @param ip the device ip address	 * @return	 */	int updateState(String deviceUuid, Integer deviceState,String ip);	/**	 * lease test; it is only use to test tools	 * @param uuId the device uuid	 * @param machineId the mcu No; a device include one or more mcu	 * @param positionNo the postion of warehouse	 * @return	 */	Boolean leaseIssue(String uuId, String machineId, String positionNo);	/**	 * lease test; it is only use to test tools	 * @param uuId the device uuid	 * @param machineId the mcu No; a device include one or more mcu	 * @param positionNo the postion of warehouse	 * @return	 */	Boolean leaseIssue(String execTime,String uuId, String machineId, String positionNo);	/**	 * lease test; it is only use to test tools	 * @param uuId the device uuid	 * @param machineId the mcu No; a device include one or more mcu	 * @param positionNo the postion of warehouse	 * @return	 */	Boolean openLock(String uuId, String machineId, String positionNo);	/**	 * retrieve the devices within query Conditions	 * @param deviceInfo the query Conditions	 * @return	 */	List<DeviceInfo> queryDeviceList(DeviceInfo deviceInfo);	/**	 * set all netty device to offline,	 */	void updateNettyDeviceToOffline();	/**	 * retrieve the devices through device version information	 * @param versionInfo the query Conditions	 * @return	 */	List<DeviceInfo> selectDeviceInfoByHardVersion(String versionInfo);	/**	 * retrieve the devices through mcu version information	 * @param versionInfo the query Conditions	 * @return	 */	List<DeviceInfo> selectDeviceInfoByProtocolVersion(String versionInfo);	/**	 * add a  new devices information	 * @param deviceInfo the new information	 * @return	 */	int addDeviceInfo(DeviceInfo deviceInfo);	/**	 * delete a device	 * @param deviceUuid device information	 * @return	 */	int delDeviceInfo(String deviceUuid);	/**	 * edit a devices information	 * @param deviceInfo device information	 * @return	 */	int editDeviceInfo(DeviceInfo deviceInfo);	/**	 * get warehouse information  by a rent order information	 * @param orderNo rent order number	 * @return	 */	R getPowerbankDetail(String orderNo, String deviceUuid);	/**	 * start to rent a charge ,it is only used to test tools	 * @param uuid  the device uuid	 * @return	 */	R sendMsg(String uuid, String positionId);	/**	 * retrieve a warehouse information	 * @param positionUuid  the postion uuid	 * @param machineUuid  the machine uuid	 * @param deviceUuid  the device uuid	 * @return	 */	Powerbank getPowerbank(String positionUuid, String machineUuid, String deviceUuid);	/**	 * retrieve all warehouse information by device uuid	 * @param deviceUuid  the device uuid	 * @return	 */	List<Powerbank> getPowerbanks(String deviceUuid);	/**	 * get mqtt device's state , online or offline	 * @param uuid  the device uuid	 * @return	 */	boolean getDeviceState(String uuid);	/**	 * Forced change the all warehouse's state	 * @param uuid  the device uuid	 * @return	 */	int alterPowerState(String uuid);	/**	 * get remain power count	 * @param deviceUuid the device uuid	 * @return	 */	R getRemainingPower(String deviceUuid);	/**	 * 设备上线通知	 * @param deviceUuid	 * @param state	 */	void advicePowerbankOnOffLine(String deviceUuid, int state);	/**	 * 升级	 * @param uuId	 * @param type	 */	boolean upgrade(String uuId,String type, String filename);	/**	 * 升级所有	 * @param type	 * @return	 */	boolean upgradeAll(String type, String filename);	/**	 * 远程上传日志	 * @param uuId	 * @param ip	 * @param username	 * @param password	 * @return	 */	boolean uploadLog(String uuId, String ip, String username, String password);	/**	 * 重新获取三元组（切换环境）	 * @param uuId	 * @return	 */	boolean updateParameter(String uuId);	/**	 * 投放广告	 * @param uuId	 * @param url	 * @param startDate	 * @param endDate	 * @param startTime	 * @param endTime	 * @param plays	 * @param playTime	 * @return	 */	boolean uploadRadio(String uuId, String url, String startDate, String endDate, String startTime, String endTime, String plays, String playTime);	/**	 * 删除所有资源	 * @param uuId	 * @return	 */	boolean deleteAllResource(String uuId);	/**	 * 删除广告	 * @param uuId	 * @param filename	 * @return	 */	boolean deleteRadio(String uuId, String filename);}